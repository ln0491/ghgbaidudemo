package com.ghg.tobacco.ui;

import android.app.Dialog;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import com.baidu.location.BDLocation;
import com.baidu.location.BDLocationListener;
import com.baidu.location.LocationClient;
import com.baidu.location.LocationClientOption;
import com.baidu.mapapi.map.BaiduMap;
import com.baidu.mapapi.map.BitmapDescriptor;
import com.baidu.mapapi.map.BitmapDescriptorFactory;
import com.baidu.mapapi.map.MapStatus;
import com.baidu.mapapi.map.MapStatusUpdateFactory;
import com.baidu.mapapi.map.MapView;
import com.baidu.mapapi.map.Marker;
import com.baidu.mapapi.map.MarkerOptions;
import com.baidu.mapapi.map.OverlayOptions;
import com.baidu.mapapi.model.LatLng;
import com.ghg.tobacco.Constants;
import com.ghg.tobacco.Data;
import com.ghg.tobacco.GetStaticData;
import com.ghg.tobacco.R;
import com.ghg.tobacco.base.BaseActivity;
import com.ghg.tobacco.bean.BusinessCompany;
import com.ghg.tobacco.bean.response.ResponseBusinessCompany;
import com.ghg.tobacco.utils.DialogUtils;

import java.util.ArrayList;
import java.util.List;

/**
 * @author $Author
 * @version $Rev$
 * @time 2016/5/16 11:09
 * @des ${TODO}
 * @updateAuthor $Author$
 * @updateDate $Date$
 * @updateDes ${TODO}
 */
public class BusinessCompanyActivity extends BaseActivity {
    private MapView mMapView;
    private BaiduMap mBaiduMap;
    private LocationClient mLocationClient;
    private ImageView btnBack;
    private View container_province_buy;
    private TextView tvAddress,tvProviceCompany;
    private TextView tv_lower_buy;//查看下级专卖局
    private TextView tv_province_buy;//查看省专卖局
    private int mType = 1;
    private LatLng mLocationLatLng;
    private int zoom_country = 6;
    private int zoom_provices = 8;
    private int zoom_provice = 10;
    private Dialog dialog;
    //所有省份
    private List<BusinessCompany> mAllProvince;
    private BusinessCompany mCountryCompany;
    private List<BusinessCompany> mProvinceCompanys;
    public BDLocationListener myListener = new MyLocationListener();
    private Handler mHandler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            super.handleMessage(msg);
            switch (msg.what) {
                case 1:
                    DialogUtils.loadingDialogDismiss(dialog);
                    addCountryMark(mCountryCompany);
                    break;
                case 2:
                    DialogUtils.loadingDialogDismiss(dialog);
                    addAllProvinceMark(mAllProvince);
                    break;
            }

        }
    };
    private BusinessCompany mProviceCompany;


    @Override
    public int bindLayout() {
        return R.layout
                .activity_business_company;
    }

    @Override
    public void initView() {
        setTitle(getResources().getString(R.string.title_map_business));
        setBtnMenu();
        container_province_buy = findViewId(R.id.container_province_buy);
        btnBack = findViewId(R.id.btn_back);
        mMapView = findViewId(R.id.mapView);
        tvAddress=findViewId(R.id.tv_address);
        tv_province_buy=findViewId(R.id.tv_province_buy);
        tv_lower_buy=findViewId(R.id.tv_lower_buy);
        tvProviceCompany=findViewId(R.id.tv_province_company);
        initMap();

    }

    private void initMap() {
        mBaiduMap = mMapView.getMap();
        mBaiduMap.setOnMarkerClickListener(new BaiduMap.OnMarkerClickListener() {
            @Override
            public boolean onMarkerClick(Marker marker) {
                Bundle bundle = marker.getExtraInfo();
                int type = bundle.getInt("mType");
                if (type == 1) {//省级
                    if (mAllProvince == null) {
                        getAllProvince();
                    } else {
                        addAllProvinceMark(mAllProvince);
                    }

                } else if (type == 2) {//市级
                     mProviceCompany = (BusinessCompany) bundle.getSerializable("businessCompany");
                    List<BusinessCompany> businessCompanys = new ArrayList<BusinessCompany>();
                    businessCompanys.add(mProviceCompany);
                    addAllProvinceMark(businessCompanys);
                    setMapCenter(new LatLng(Double.valueOf(mProviceCompany.latitude), Double.parseDouble(mProviceCompany.longitude)), zoom_provice);
                    BusinessCompanyActivity.this.mType = 3;
                    container_province_buy.setVisibility(View.VISIBLE);

                    tvProviceCompany.setText(mProviceCompany.name);
                    tvAddress.setText(mProviceCompany.address);

                }
                return false;
            }


        });
        initLocation();
        mLocationClient.start();
    }

    @Override
    public void initListener() {
        btnBack.setOnClickListener(this);
        tv_lower_buy.setOnClickListener(this);
        tv_province_buy.setOnClickListener(this);
    }

    @Override
    public void initData() {
        getTotalProvince();

    }


    @Override
    public void resume() {
        mMapView.onResume();
    }

    @Override
    public void pause() {
        mMapView.onPause();
    }

    @Override
    public void stop() {

    }

    @Override
    public void destroy() {

        mMapView.onDestroy();
        if (GetStaticData.businessCompanyCityMap != null) {
            GetStaticData.businessCompanyCityMap.clear();
            GetStaticData.businessCompanyCityMap = null;
        }

        if (GetStaticData.businessCompanyProvinceList != null) {
            GetStaticData.businessCompanyProvinceList.clear();
            GetStaticData.businessCompanyProvinceList = null;
        }
    }

    @Override
    public void onClick(View v) {

        switch (v.getId()) {
            case R.id.btn_back:
                if (mType == 1) {
                    finish();
                } else if (mType == 2) {
                    container_province_buy.setVisibility(View.GONE);
                    addCountryMark(mCountryCompany);
                    setMapCenter(new LatLng(Double.parseDouble(mCountryCompany.latitude), Double.parseDouble(mCountryCompany.longitude)), zoom_country);
                } else if (mType == 3) {
                    container_province_buy.setVisibility(View.GONE);
                    addAllProvinceMark(mAllProvince);
                }
                break;

            case R.id.tv_lower_buy:
                break;
            case R.id.tv_province_buy:
                Intent intent=new Intent(BusinessCompanyActivity.this,ProvinceCompanyActivity.class);
                intent.putExtra("company",mProviceCompany);
                startActivity(intent);
                break;
        }
    }

    /**
     * 添加全国marker标记
     *
     * @param businessCompany
     */
    private void addCountryMark(BusinessCompany businessCompany) {
        if (businessCompany == null) {
            return;
        }
        mType = 1;
        mBaiduMap.clear();
        View view = LayoutInflater.from(this).inflate(R.layout.mark_business, null);
        TextView tv_province_nums = (TextView) view.findViewById(R.id.tv_province_nums);
        TextView tv_plan = (TextView) view.findViewById(R.id.tv_plan);
        tv_province_nums.setText(businessCompany.quantity + "省");
        tv_plan.setText(businessCompany.factNum + "/" + businessCompany.planNum);
        //定义Maker坐标点
        //构建Marker图标
        BitmapDescriptor bitmap = BitmapDescriptorFactory
                .fromView(view);
        LatLng latLng = new LatLng(Double.parseDouble(businessCompany.latitude), Double.parseDouble(businessCompany.longitude));
        //构建MarkerOption，用于在地图上添加Marker
        OverlayOptions option = new MarkerOptions()
                .position(latLng)
                .icon(bitmap);
        //在地图上添加Marker，并显示
        Marker marker = (Marker) mBaiduMap.addOverlay(option);
        Bundle bundle = new Bundle();
        bundle.putInt("mType", 1);
        marker.setExtraInfo(bundle);
        setMapCenter(latLng, zoom_country);

    }


    private void addAllProvinceMark(List<BusinessCompany> company) {

        if (company == null && company.size() == 0) {
            Toast.makeText(BusinessCompanyActivity.this, "无数据", Toast.LENGTH_SHORT).show();
            return;
        }
        if (mLocationLatLng != null) {
            setMapCenter(mLocationLatLng, zoom_provices);
        } else {
            BusinessCompany businessCompany = company.get(0);
            setMapCenter(new LatLng(Double.parseDouble(businessCompany.latitude), Double.parseDouble(businessCompany.longitude)), zoom_provices);
        }
        mBaiduMap.clear();
        for (int i = 0; i < company.size(); i++) {
            View view = LayoutInflater.from(this).inflate(R.layout.mark_business_city, null);
            TextView tv_province = (TextView) view.findViewById(R.id.tv_province);
            TextView tv_real_plan = (TextView) view.findViewById(R.id.tv_real_plan);
            BusinessCompany businessCompany = company.get(i);
            tv_province.setText(businessCompany.provinceName);
            tv_real_plan.setText(businessCompany.factNum + "/" + businessCompany.planNum);
            //定义Maker坐标点
            //构建Marker图标
            BitmapDescriptor bitmap = BitmapDescriptorFactory
                    .fromView(view);
            //构建MarkerOption，用于在地图上添加Marker
            OverlayOptions option = new MarkerOptions()
                    .position(new LatLng(Double.parseDouble(businessCompany.latitude), Double.parseDouble(businessCompany.longitude)))
                    .icon(bitmap);
            //在地图上添加Marker，并显示
            Marker marker = (Marker) mBaiduMap.addOverlay(option);
            Bundle bundle = new Bundle();
            mType = 2;
            bundle.putInt("mType", 2);
            bundle.putSerializable("businessCompany", businessCompany);
            marker.setExtraInfo(bundle);

        }

    }

    /**
     * 初始化定位
     */
    private void initLocation() {
        mLocationClient = new LocationClient(getApplicationContext());     //声明LocationClient类
        mLocationClient.registerLocationListener(myListener);    //注册监听函数
        LocationClientOption option = new LocationClientOption();
        option.setLocationMode(LocationClientOption.LocationMode.Hight_Accuracy
        );//可选，默认高精度，设置定位模式，高精度，低功耗，仅设备
        option.setCoorType("bd09ll");//可选，默认gcj02，设置返回的定位结果坐标系
        //        int span=1000;
        //        option.setScanSpan(span);//可选，默认0，即仅定位一次，设置发起定位请求的间隔需要大于等于1000ms才是有效的
        option.setIsNeedAddress(true);//可选，设置是否需要地址信息，默认不需要
        option.setOpenGps(true);//可选，默认false,设置是否使用gps
        option.setLocationNotify(true);//可选，默认false，设置是否当gps有效时按照1S1次频率输出GPS结果
        option.setIsNeedLocationDescribe(true);//可选，默认false，设置是否需要位置语义化结果，可以在BDLocation.getLocationDescribe里得到，结果类似于“在北京天安门附近”
        option.setIsNeedLocationPoiList(true);//可选，默认false，设置是否需要POI结果，可以在BDLocation.getPoiList里得到
        option.setIgnoreKillProcess(false);//可选，默认true，定位SDK内部是一个SERVICE，并放到了独立进程，设置是否在stop的时候杀死这个进程，默认不杀死
        option.SetIgnoreCacheException(false);//可选，默认false，设置是否收集CRASH信息，默认收集
        option.setEnableSimulateGps(false);//可选，默认false，设置是否需要过滤gps仿真结果，默认需要
        mLocationClient.setLocOption(option);
    }


    private void setMapCenter(LatLng latLng, int zoom) {
        mBaiduMap.setMapStatus(MapStatusUpdateFactory.newMapStatus(new MapStatus.Builder().
                target(latLng).zoom(zoom).build()));//设置缩放级别
    }

    private class MyLocationListener implements BDLocationListener {

        @Override
        public void onReceiveLocation(BDLocation bdLocation) {
            mLocationClient.stop();
            if (bdLocation == null) {
                Toast.makeText(BusinessCompanyActivity.this, "定位失败", Toast.LENGTH_SHORT).show();
                return;
            }
            Toast.makeText(BusinessCompanyActivity.this, bdLocation.getAddrStr(), Toast.LENGTH_SHORT).show();
            LatLng latLng = new LatLng(bdLocation.getLatitude(), bdLocation.getLongitude());
            mLocationLatLng = latLng;

        }
    }


    @Override
    public void onBackPressed() {
        btnBack.performClick();
    }


    /**
     * 获取共多少家烟草专卖局
     */
    private void getTotalProvince() {
        dialog = DialogUtils.loadingDialog(BusinessCompanyActivity.this);
        dialog.setCancelable(false);
        new Thread(new Runnable() {
            @Override
            public void run() {
                ResponseBusinessCompany responseBusinessCompany = Data.getResBusinessCompany(BusinessCompanyActivity.this, Constants.Area.COUNTRY, null);
                List<BusinessCompany> companies = responseBusinessCompany.company;
                if (companies != null && companies.size() != 0) {
                    mCountryCompany = companies.get(0);
                }
                mHandler.sendEmptyMessage(1);
            }
        }).start();


    }

    /**
     * 获取所有省份
     */
    private void getAllProvince() {
        dialog = DialogUtils.loadingDialog(this);
        dialog.setCancelable(false);
        new Thread(new Runnable() {
            @Override
            public void run() {
                ResponseBusinessCompany companies = Data.getResBusinessCompany(BusinessCompanyActivity.this, Constants.Area.PROVINCE, null);
                if (companies != null) {
                    mAllProvince = companies.company;
                    mHandler.sendEmptyMessage(2);
                }
            }
        }).start();
    }

    /**
     * 获取省份公司
     */
    private void getProvinceCompanys(final String province) {
        dialog = DialogUtils.loadingDialog(this);
        dialog.setCancelable(false);
        new Thread(new Runnable() {
            @Override
            public void run() {
                ResponseBusinessCompany companies = Data.getResBusinessCompany(BusinessCompanyActivity.this, Constants.Area.CITY, province);
                if (companies != null) {
                    mProvinceCompanys = companies.company;
                    mHandler.sendEmptyMessage(2);
                }
            }
        }).start();
    }
}
