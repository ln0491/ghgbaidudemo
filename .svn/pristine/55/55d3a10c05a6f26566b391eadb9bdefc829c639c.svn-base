package com.ghg.tobacco.base;


import android.app.Activity;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;

import com.ghg.tobacco.R;
import com.ghg.tobacco.bean.FormData;
import com.ghg.tobacco.utils.UnitUtils;
import com.github.mikephil.charting.charts.LineChart;
import com.github.mikephil.charting.components.Legend;
import com.github.mikephil.charting.components.XAxis;
import com.github.mikephil.charting.components.YAxis;
import com.github.mikephil.charting.data.Entry;
import com.github.mikephil.charting.data.LineData;
import com.github.mikephil.charting.data.LineDataSet;
import com.github.mikephil.charting.highlight.Highlight;
import com.github.mikephil.charting.interfaces.datasets.ILineDataSet;
import com.github.mikephil.charting.listener.OnChartValueSelectedListener;
import com.github.mikephil.charting.renderer.LineChartRenderer;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * Created by weizhi.zhu on 2016/5/6.
 */
public abstract class BaseFragment extends Fragment {

    //这个activity就是MainActivity
    public Activity mActivity;

    // Fragment被创建
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        mActivity = getActivity();// 获取所在的activity对象
    }

    // 初始化Fragment布局
    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        View view =bindLayout(inflater);
        initView();
        return view;
    }

    // activity创建结束
    @Override
    public void onActivityCreated(Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        initData();
    }

    /**
     * 初始化布局, 子类必须实现
     */
    public abstract View bindLayout(LayoutInflater inflater);
    /**
     * 初始化布局, 子类必须实现
     */
    public abstract void initView();

    /**
     * 初始化数据, 子类可以不实现
     */
    public void initData() {

    }



    // 初始化图表
    public void initialChart(LineChart mChart,int[]mColors) {
//        mColors = new int[]{
//                getResources().getColor(R.color.color_blue),
//                getResources().getColor(R.color.color_f9435c),
//                getResources().getColor(R.color.color_fdbc3b),
//        };

        //描述
        mChart.setDescription("");
        mChart.setNoDataTextDescription("暂无数据");
        mChart.setTouchEnabled(true);
        // 不可拖曳
        mChart.setDragEnabled(false);
        // 不可缩放
        mChart.setScaleEnabled(false);
        mChart.setDrawGridBackground(false);
        mChart.setPinchZoom(false);

        // 设置图表的背景颜色
        mChart.setBackgroundColor(getResources().getColor(R.color.color_transparent));

        // 图表的注解(只有当数据集存在时候才生效)
        Legend l = mChart.getLegend();
        // 线性，也可是圆
        l.setForm(Legend.LegendForm.CIRCLE);
        // 可以修改图表注解部分的位置
        l.setPosition(Legend.LegendPosition.ABOVE_CHART_RIGHT);
        // 图表的注解的字体颜色
        l.setTextColor(getResources().getColor(R.color.color_969696));
        // x坐标轴
        XAxis xl = mChart.getXAxis();
        xl.lastAnchorX = 0.2f;
        xl.setTextColor(getResources().getColor(R.color.color_969696));
        xl.setAvoidFirstLastClipping(true);
        xl.setSelectedIndex(0);
        // 几个x坐标轴之间才绘制？
        xl.setSpaceBetweenLabels(1);
        xl.setDrawAxisLine(true);
        xl.setAxisLineColor(getResources().getColor(R.color.color_3f969696));
        xl.setTextColor(getResources().getColor(R.color.color_969696));
        // 如果false，那么x坐标轴将不可见
        xl.setEnabled(true);
        // 将X坐标轴放置在底部，默认是在底部。
        xl.setPosition(XAxis.XAxisPosition.BOTTOM);
        LineChartRenderer chartRenderer = mChart.getDataRenderer();
        chartRenderer.setXAxis(xl);

        //        xl.setXOffset(30);
        //        xl.setYOffset(30);
        xl.setSelectedIndex(0);
        xl.setFirstOffest(true);
        chartRenderer.setSelectedIndex(0);
        //        xl.setGridColor(
        //                getResources().getColor(R.color.color_transparent));
        // 图表左边的y坐标轴线
        YAxis leftAxis = mChart.getAxisLeft();
        //        leftAxis.setDrawZeroLine(true);
        leftAxis.setTextColor(getResources().getColor(R.color.color_969696));
        //        leftAxis.setGridColor(
        //                getResources().getColor(R.color.color_transparent));
        chartRenderer.setYAxis(leftAxis);
        //        隐藏左边坐标轴横网格线
        leftAxis.setDrawGridLines(true);
        leftAxis.setGridColor(getResources().getColor(R.color.color_3f969696));
        //隐藏右边坐标轴横网格线
        mChart.getAxisRight().setDrawGridLines(false);
        //隐藏X轴竖网格线
        xl.setDrawGridLines(false);
        //隐藏左边Y轴
        leftAxis.setDrawAxisLine(false);
        leftAxis.setEnabled(true);
        leftAxis.setYOffset(-10);
        //        leftAxis.setXOffset(5);
        //        // 最大值
        //        leftAxis.setAxisMaxValue(Integer.MAX_VALUE);
        //        // 最小值
        //        leftAxis.setAxisMinValue(0f);
        // 不一定要从0开始
        //        leftAxis.setStartAtZero(false);
        //        leftAxis.setDrawGridLines(true);

        YAxis rightAxis = mChart.getAxisRight();
        // 不显示图表的右边y坐标轴线
        rightAxis.setEnabled(false);

    }




    public void setLineData(final LineChart mChart, FormData formData,int[]mColors, float lastAnchorX) {
        mChart.getXAxis().lastAnchorX = lastAnchorX;
        ArrayList<String> xVals = new ArrayList<>();
        List<String> xLabel = formData.label;
        String[] dataKey = formData.dataKey;
        Map<String, List<Double>> datas = formData.data;//Y轴数据
        mChart.getAxisLeft().setLabelCount(formData.space + 1, true);
        for (int i = 0; i < xLabel.size(); i++) {
            xVals.add((xLabel.get(i)));
        }

        ArrayList<ILineDataSet> dataSets = new ArrayList<>();


        for (int i = 0; i < dataKey.length; i++) {
            ArrayList<Entry> values = new ArrayList<>();
            List<Double> yValues = datas.get(dataKey[i]);

            for (int j = 0; j < xLabel.size(); j++) {
                double value = yValues.get(j);
                Entry entry = new Entry((float) value, j);
                values.add(entry);
            }
            LineDataSet d = new LineDataSet(values, dataKey[i]);
            d.setLineWidth(1f);
            d.setCircleRadius(4f);
            int color = mColors[i % mColors.length];
            d.setColor(color);
            d.setCircleColor(color);
            d.setValueTextColor(color);
            d.setValueTextSize(10);
            //是否显示点上的值
            d.setDrawValues(true);
            dataSets.add(d);

        }


        LineData data = new LineData(xVals, dataSets);
        mChart.setData(data);
        mChart.animateX(500);
        mChart.invalidate();
        mChart.setOnChartValueSelectedListener(new OnChartValueSelectedListener() {
            @Override
            public void onValueSelected(Entry e, int dataSetIndex, Highlight h) {

                XAxis mXAxis = mChart.getXAxis();
                if (mXAxis.getSelectedIndex() != e.getXIndex()) {
                    mXAxis.setSelectedIndex(e.getXIndex());
                    LineChartRenderer mRenderer = mChart.getDataRenderer();
                    mRenderer.setSelectedIndex(mXAxis.getSelectedIndex());
                    mChart.invalidate();
                }
            }

            @Override
            public void onNothingSelected() {

            }
        });
    }

    public void setChartHeight(LinearLayout layout, int height, int space) {
        LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams) layout.getLayoutParams();
        height = UnitUtils.dip2px(getActivity(), space * 50 + 40 + 31) + height;
        layoutParams.height = height;
        layout.setLayoutParams(layoutParams);
    }
}
