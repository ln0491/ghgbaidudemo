package com.ghg.tobacco.fragment;

import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewTreeObserver;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.RadioGroup;

import com.ghg.tobacco.Data;
import com.ghg.tobacco.GetStaticData;
import com.ghg.tobacco.R;
import com.ghg.tobacco.bean.FormData;
import com.ghg.tobacco.bean.response.ResponseBigData;
import com.ghg.tobacco.utils.UnitUtils;
import com.github.mikephil.charting.charts.LineChart;
import com.github.mikephil.charting.components.Legend;
import com.github.mikephil.charting.components.XAxis;
import com.github.mikephil.charting.components.YAxis;
import com.github.mikephil.charting.data.Entry;
import com.github.mikephil.charting.data.LineData;
import com.github.mikephil.charting.data.LineDataSet;
import com.github.mikephil.charting.highlight.Highlight;
import com.github.mikephil.charting.interfaces.datasets.ILineDataSet;
import com.github.mikephil.charting.listener.OnChartValueSelectedListener;
import com.github.mikephil.charting.renderer.LineChartRenderer;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * Created by yicen.wang on 2016/5/19.
 */
public class BigDataIndustryFragment extends Fragment {

    private static final String ARG_PARAM1 = "param1";
    private static final String ARG_PARAM2 = "param2";

    private String mParam1;
    private String mParam2;

    private int[] mColors;
    private ArrayList<ILineDataSet> dataSets;

    private View mView;
    private RadioButton mRbtnProduceMonth, mRbtnProduceSeason, mRbtnProduceYear,mRbtnSaleMonth, mRbtnSaleSeason, mRbtnSaleYear;
    private LineChart mChartProduce, mChartSale,mChartInventory;
    private RadioGroup mRgProduce,mRgSale;
    private LinearLayout container_sale;
    private LinearLayout container_inventory_tab;
    private LinearLayout container_inventory;
    private LinearLayout container_sale_tab;
    private LinearLayout container_product;
    private LinearLayout container_product_tab;

    public BigDataIndustryFragment() {
    }

    public static BigDataIndustryFragment newInstance (String param1, String param2) {
        BigDataIndustryFragment fragment = new BigDataIndustryFragment();
        Bundle args = new Bundle();
        args.putString(ARG_PARAM1, param1);
        args.putString(ARG_PARAM2, param2);
        fragment.setArguments(args);
        return fragment;
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        if (getArguments() != null) {
            mParam1 = getArguments().getString(ARG_PARAM1);
            mParam2 = getArguments().getString(ARG_PARAM2);
        }
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        mView = inflater.inflate(R.layout.fragment_big_data_industry, container, false);

        initView();
        initListener();
        initialChart(mChartProduce);
        initialChart(mChartSale);
        initialChart(mChartInventory);

        setLineData(mChartInventory, Data.getResInventory(GetStaticData.TYPE_MONTH,GetStaticData.TYPE_INDUSTRY).formData,0);
        mRbtnProduceMonth.setChecked(true);
        mRbtnSaleMonth.setChecked(true);

        return mView;
    }


    private void initView() {
        mRgProduce = (RadioGroup) mView.findViewById(R.id.rg_produce);
        mRgSale = (RadioGroup) mView.findViewById(R.id.rg_sale);
        mChartProduce = (LineChart) mView.findViewById(R.id.lineChart_produce);
        mChartSale = (LineChart) mView.findViewById(R.id.lineChart_sale);
        mChartInventory = (LineChart) mView.findViewById(R.id.lineChart_inventory);
        mRbtnProduceMonth = (RadioButton) mView.findViewById(R.id.rb_produce_month);
        mRbtnProduceSeason = (RadioButton) mView.findViewById(R.id.rb_produce_season);
        mRbtnProduceYear = (RadioButton) mView.findViewById(R.id.rb_produce_year);
        mRbtnSaleMonth = (RadioButton) mView.findViewById(R.id.rb_sale_month);
        mRbtnSaleSeason = (RadioButton) mView.findViewById(R.id.rb_sale_season);
        mRbtnSaleYear = (RadioButton) mView.findViewById(R.id.rb_sale_year);




        container_sale_tab = (LinearLayout) mView.findViewById(R.id.container_sale_tab);
        container_sale = (LinearLayout) mView.findViewById(R.id.container_sale);
        container_inventory_tab = (LinearLayout) mView.findViewById(R.id.container_inventory_tab);
        container_inventory = (LinearLayout) mView.findViewById(R.id.container_inventory);
        container_product = (LinearLayout) mView.findViewById(R.id.container_product);
        container_product_tab = (LinearLayout) mView.findViewById(R.id.container_product_tab);

    }

    private boolean isFristSale=true;
    private int spaceSale=0;
    private boolean isFristProudct=true;
    private int spaceProduct=0;
    private boolean isFristInventory=true;
    private int spaceInventory=0;
    private void initListener() {

        container_sale_tab.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {

            @Override
            public void onGlobalLayout() {
                if (isFristSale) {
                    if (spaceSale != 0) {
                        setChartHeight(container_sale,container_sale_tab.getHeight(),spaceSale);
                    }
                    isFristSale = false;
                }
            }
        });

        container_inventory_tab.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {

            @Override
            public void onGlobalLayout() {
                if (isFristInventory) {
                    if (spaceInventory != 0) {
                        setChartHeight(container_inventory,container_inventory_tab.getHeight(),spaceInventory);
                    }
                    isFristInventory = false;
                }
            }
        });

        container_product_tab.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {

            @Override
            public void onGlobalLayout() {
                if (isFristProudct) {
                    if (spaceProduct != 0) {
                        setChartHeight(container_product,container_product_tab.getHeight(),spaceProduct);
                    }
                    isFristProudct = false;
                }
            }
        });
        mRgProduce.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(RadioGroup group, int checkedId) {
                ResponseBigData data = null;
                switch (checkedId) {
                    case R.id.rb_produce_month:
                        data = Data.getResProduce(GetStaticData.TYPE_MONTH);
                        setLineData(mChartProduce, data.formData,0);
                        break;
                    case R.id.rb_produce_season:
                        data = Data.getResProduce(GetStaticData.TYPE_SEASON);
                        setLineData(mChartProduce, data.formData,0.2f);
                        break;
                    case R.id.rb_produce_year:
                        data = Data.getResProduce(GetStaticData.TYPE_YEAR);
                        setLineData(mChartProduce, data.formData,0.2f);
                        break;
                }

            }
        });
        mRgSale.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(RadioGroup group, int checkedId) {
                ResponseBigData data = null;
                switch (checkedId) {
                    case R.id.rb_sale_month:
                        data = Data.getResSale(GetStaticData.TYPE_MONTH,GetStaticData.TYPE_INDUSTRY);
                        setLineData(mChartSale, data.formData,0);
                        break;
                    case R.id.rb_sale_season:
                        data = Data.getResSale(GetStaticData.TYPE_SEASON,GetStaticData.TYPE_INDUSTRY);
                        setLineData(mChartSale, data.formData,0.2f);
                        break;
                    case R.id.rb_sale_year:
                        
                        data = Data.getResSale(GetStaticData.TYPE_YEAR,GetStaticData.TYPE_INDUSTRY);
                        setLineData(mChartSale, data.formData,0);
                        break;
                }

            }
        });
    }

    // 初始化图表
    private void initialChart(LineChart mChart) {
        mColors = new int[]{
                getResources().getColor(R.color.color_blue),
                getResources().getColor(R.color.color_f9435c),
                getResources().getColor(R.color.color_fdbc3b),
        };

        //描述
        mChart.setDescription("");
        mChart.setNoDataTextDescription("暂无数据");
        mChart.setTouchEnabled(true);
        // 不可拖曳
        mChart.setDragEnabled(false);
        // 不可缩放
        mChart.setScaleEnabled(false);
        mChart.setDrawGridBackground(false);
        mChart.setPinchZoom(false);

        // 设置图表的背景颜色
        mChart.setBackgroundColor(getResources().getColor(R.color.color_transparent));

        // 图表的注解(只有当数据集存在时候才生效)
        Legend l = mChart.getLegend();
        // 线性，也可是圆
        l.setForm(Legend.LegendForm.CIRCLE);
        // 可以修改图表注解部分的位置
        l.setPosition(Legend.LegendPosition.ABOVE_CHART_RIGHT);
        // 图表的注解的字体颜色
        l.setTextColor(getResources().getColor(R.color.color_969696));
        // x坐标轴
        XAxis xl = mChart.getXAxis();
        xl.setTextColor(getResources().getColor(R.color.color_969696));
        xl.setAvoidFirstLastClipping(true);
        xl.setSelectedIndex(0);
        // 几个x坐标轴之间才绘制？
        xl.setSpaceBetweenLabels(1);
        xl.setDrawAxisLine(true);
        xl.setAxisLineColor(getResources().getColor(R.color.color_3f969696));
        xl.setTextColor(getResources().getColor(R.color.color_969696));
        // 如果false，那么x坐标轴将不可见
        xl.setEnabled(true);
        // 将X坐标轴放置在底部，默认是在底部。
        xl.setPosition(XAxis.XAxisPosition.BOTTOM);
        LineChartRenderer chartRenderer = mChart.getDataRenderer();
        chartRenderer.setXAxis(xl);

//        xl.setXOffset(30);
//        xl.setYOffset(30);
        xl.setSelectedIndex(0);
        xl.setFirstOffest(true);
        chartRenderer.setSelectedIndex(0);
//        xl.setGridColor(
//                getResources().getColor(R.color.color_transparent));
        // 图表左边的y坐标轴线
        YAxis leftAxis = mChart.getAxisLeft();
//        leftAxis.setDrawZeroLine(true);
        leftAxis.setTextColor(getResources().getColor(R.color.color_969696));
//        leftAxis.setGridColor(
//                getResources().getColor(R.color.color_transparent));
        chartRenderer.setYAxis(leftAxis);
//        隐藏左边坐标轴横网格线
        leftAxis.setDrawGridLines(true);
        leftAxis.setGridColor(getResources().getColor(R.color.color_3f969696));
        //隐藏右边坐标轴横网格线
        mChart.getAxisRight().setDrawGridLines(false);
        //隐藏X轴竖网格线
        xl.setDrawGridLines(false);
        //隐藏左边Y轴
        leftAxis.setDrawAxisLine(false);
        leftAxis.setEnabled(true);
        leftAxis.setYOffset(-10);
//        leftAxis.setXOffset(5);
//        // 最大值
//        leftAxis.setAxisMaxValue(Integer.MAX_VALUE);
//        // 最小值
//        leftAxis.setAxisMinValue(0f);
        // 不一定要从0开始
//        leftAxis.setStartAtZero(false);
//        leftAxis.setDrawGridLines(true);

        YAxis rightAxis = mChart.getAxisRight();
        // 不显示图表的右边y坐标轴线
        rightAxis.setEnabled(false);


    }


    private void setLineData(final LineChart mChart, FormData formData,float lastAnchorX) {
        mChart.getXAxis().lastAnchorX=lastAnchorX;
        ArrayList<String> xVals = new ArrayList<>();
        List<String> xLabel = formData.label;
        String[] dataKey = formData.dataKey;
        Map<String, List<Double>> datas = formData.data;//Y轴数据
        mChart.getAxisLeft().setLabelCount(formData.space+1, true);

        if (mChart==mChartInventory){
            spaceInventory=formData.space;
            int height = container_inventory_tab.getHeight();
            if (height != 0) {
                setChartHeight(container_inventory,height,spaceInventory);
//                setSaleChartHeight(height);
            }
        }else  if (mChart==mChartProduce){
            spaceProduct=formData.space;
            int height = container_product_tab.getHeight();
            if (height != 0) {
                setChartHeight(container_product,height,spaceProduct);
//                setSaleChartHeight(height);
            }
        }else  if (mChart==mChartSale){
            spaceSale=formData.space;
            int height = container_sale_tab.getHeight();
            if (height != 0) {
                setChartHeight(container_sale,height,spaceSale);
//                setSaleChartHeight(height);
            }
        }

        for (int i = 0; i < xLabel.size(); i++) {
            xVals.add((xLabel.get(i)));
        }

        dataSets = new ArrayList<>();


        for (int i = 0; i < dataKey.length; i++) {
            ArrayList<Entry> values = new ArrayList<>();
            List<Double> yValues = datas.get(dataKey[i]);

            for (int j = 0; j < xLabel.size(); j++) {
                double value = yValues.get(j);
                Entry entry = new Entry((float) value, j);
                values.add(entry);
            }
            LineDataSet d = new LineDataSet(values, dataKey[i]);
            d.setLineWidth(1f);
            d.setCircleRadius(4f);
            int color = mColors[i % mColors.length];
            d.setColor(color);
            d.setCircleColor(color);
            d.setValueTextColor(color);
            d.setValueTextSize(10);
            //是否显示点上的值
            d.setDrawValues(true);
            dataSets.add(d);

        }


        LineData data = new LineData(xVals, dataSets);
        mChart.setData(data);
        mChart.animateX(500);
        mChart.invalidate();
        mChart.setOnChartValueSelectedListener(new OnChartValueSelectedListener() {
            @Override
            public void onValueSelected(Entry e, int dataSetIndex, Highlight h) {

                XAxis mXAxis = mChart.getXAxis();
                if (mXAxis.getSelectedIndex() != e.getXIndex()) {
                    mXAxis.setSelectedIndex(e.getXIndex());
                    LineChartRenderer mRenderer = mChart.getDataRenderer();
                    mRenderer.setSelectedIndex(mXAxis.getSelectedIndex());
                    mChart.invalidate();
                }
            }

            @Override
            public void onNothingSelected() {

            }
        });
    }

    private void setChartHeight(LinearLayout layout,int height,int space) {
        LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams) layout.getLayoutParams();
        height = UnitUtils.dip2px(getActivity(), space * 50 + 40 + 31) + height;
        layoutParams.height = height;
        layout.setLayoutParams(layoutParams);
    }
}
