package com.ghg.tobacco.fragment;

import android.content.Intent;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.TextView;

import com.ghg.tobacco.Data;
import com.ghg.tobacco.GetStaticData;
import com.ghg.tobacco.R;
import com.ghg.tobacco.bean.FormData;
import com.ghg.tobacco.bean.response.ResponseCheck;
import com.ghg.tobacco.ui.InspectionDetailActivity;
import com.github.mikephil.charting.charts.LineChart;
import com.github.mikephil.charting.components.Legend;
import com.github.mikephil.charting.components.XAxis;
import com.github.mikephil.charting.components.YAxis;
import com.github.mikephil.charting.data.Entry;
import com.github.mikephil.charting.data.LineData;
import com.github.mikephil.charting.data.LineDataSet;
import com.github.mikephil.charting.highlight.Highlight;
import com.github.mikephil.charting.interfaces.datasets.ILineDataSet;
import com.github.mikephil.charting.listener.OnChartValueSelectedListener;
import com.github.mikephil.charting.renderer.LineChartRenderer;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;


/**
 * A simple {@link Fragment} subclass.
 * Activities that contain this fragment must implement the
 * to handle interaction events.
 * Use the {@link InspectionFragment#newInstance} factory method to
 * create an instance of this fragment.
 */
public class InspectionFragment extends Fragment implements View.OnClickListener {
    // TODO: Rename parameter arguments, choose names that match
    // the fragment initialization parameters, e.g. ARG_ITEM_NUMBER
    private static final String ARG_PARAM1 = "param1";
    private static final String ARG_PARAM2 = "param2";

    // TODO: Rename and change types of parameters
    private String mParam1;
    private String mParam2;
    private View mView;
    private RadioButton rb_month, rb_year;
    private LineChart mChart;
    private TextView tvMonth, tvDay;
    private TextView tv_inspection_nums, tv_false_smoke_nums, tv_Chuanhuo_nums;
    private RadioGroup mRadioGroup;
    private String[] months;
    private int[] mColors;
    private  ArrayList<ILineDataSet> dataSets;
    private Button btn_detail;
    public InspectionFragment() {
        // Required empty public constructor
    }

    /**
     * Use this factory method to create a new instance of
     * this fragment using the provided parameters.
     *
     * @param param1 Parameter 1.
     * @param param2 Parameter 2.
     * @return A new instance of fragment InspectionFragment.
     */
    // TODO: Rename and change types and number of parameters
    public static InspectionFragment newInstance(String param1, String param2) {
        InspectionFragment fragment = new InspectionFragment();
        Bundle args = new Bundle();
        args.putString(ARG_PARAM1, param1);
        args.putString(ARG_PARAM2, param2);
        fragment.setArguments(args);
        return fragment;
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        if (getArguments() != null) {
            mParam1 = getArguments().getString(ARG_PARAM1);
            mParam2 = getArguments().getString(ARG_PARAM2);
        }

    }


    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        mView = inflater.inflate(R.layout.fragment_inspection, container, false);

        months = new String[]{"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};
        initView();
        initialChart(mChart);
        rb_month.setChecked(true);

        return mView;
    }

    private void initData(ResponseCheck checkData) {
        String[] date = checkData.date.split("-");
        tvMonth.setText(String.valueOf(months[Integer.parseInt(date[0]) - 1]));
        tvDay.setText(String.valueOf(date[1]));
        tv_false_smoke_nums.setText(String.valueOf(checkData.fakes));
        tv_Chuanhuo_nums.setText(String.valueOf(checkData.mix));
        tv_inspection_nums.setText(String.valueOf(checkData.check));
    }

    private void initView() {
        mRadioGroup = (RadioGroup) mView.findViewById(R.id.radioGroup);
        btn_detail= (Button) mView.findViewById(R.id.btn_detail);
        mChart = (LineChart) mView.findViewById(R.id.lineChart);
        rb_month = (RadioButton) mView.findViewById(R.id.rb_month);
        rb_year = (RadioButton) mView.findViewById(R.id.rb_year);
        tv_inspection_nums = (TextView) mView.findViewById(R.id.tv_inspection_nums);
        tv_false_smoke_nums = (TextView) mView.findViewById(R.id.tv_false_smoke_nums);
        tv_Chuanhuo_nums = (TextView) mView.findViewById(R.id.tv_Chuanhuo_nums);
        tvMonth = (TextView) mView.findViewById(R.id.tv_month);
        tvDay = (TextView) mView.findViewById(R.id.tv_day);
        initListener();

    }

    private void initListener() {
        btn_detail.setOnClickListener(this);
        mRadioGroup.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(RadioGroup group, int checkedId) {
                ResponseCheck checkData = null;
                switch (checkedId) {
                    case R.id.rb_month:
//                        mHorizontalBarChart.getXAxis().setLabelRotationAngle(0);
                        checkData = Data.getResCheck(GetStaticData.TYPE_MONTH);
                        initData(checkData);
                        setLineData(checkData);
                        break;
                    case R.id.rb_year:
//                        mHorizontalBarChart.getXAxis().setLabelRotationAngle(-30);
                        checkData = Data.getResCheck(GetStaticData.TYPE_YEAR);
                        setLineData(checkData);
                        break;
                }

            }
        });
    }


    // 初始化图表
    private void initialChart(LineChart mChart) {
        mColors = new int[]{
                getResources().getColor(R.color.color_blue),
                getResources().getColor(R.color.color_f9435c),
                getResources().getColor(R.color.color_fdbc3b),
        };

//        CustomMarkerView mv = new CustomMarkerView(getActivity(),
//                R.layout.layout_markview);
//        // set the marker to the chart
//        mHorizontalBarChart.setMarkerView(mv);
        //描述
        mChart.setDescription("");
        mChart.setNoDataTextDescription("暂无数据");
        mChart.setTouchEnabled(true);
        // 不可拖曳
        mChart.setDragEnabled(false);
        // 不可缩放
        mChart.setScaleEnabled(false);
        mChart.setDrawGridBackground(false);
        mChart.setPinchZoom(false);

        // 设置图表的背景颜色
        mChart.setBackgroundColor(getResources().getColor(R.color.color_transparent));

        // 图表的注解(只有当数据集存在时候才生效)
        Legend l = mChart.getLegend();
        // 线性，也可是圆
        l.setForm(Legend.LegendForm.CIRCLE);
        // 可以修改图表注解部分的位置
        l.setPosition(Legend.LegendPosition.ABOVE_CHART_RIGHT);
        // 图表的注解的字体颜色
        l.setTextColor(getResources().getColor(R.color.color_969696));
        // x坐标轴
        XAxis xl = mChart.getXAxis();
        xl.setTextColor(getResources().getColor(R.color.color_969696));
        xl.setAvoidFirstLastClipping(true);
        xl.setSelectedIndex(0);
        // 几个x坐标轴之间才绘制？
        xl.setSpaceBetweenLabels(1);
        xl.setDrawAxisLine(false);
        // 如果false，那么x坐标轴将不可见
        xl.setEnabled(true);
        // 将X坐标轴放置在底部，默认是在底部。
        xl.setPosition(XAxis.XAxisPosition.BOTTOM);
        LineChartRenderer chartRenderer = mChart.getDataRenderer();
        chartRenderer.setXAxis(xl);

        xl.setSelectedIndex(0);
        chartRenderer.setSelectedIndex(0);
//        xl.setGridColor(
//                getResources().getColor(R.color.color_transparent));
        // 图表左边的y坐标轴线
        YAxis leftAxis = mChart.getAxisLeft();
//        leftAxis.setDrawZeroLine(true);
        leftAxis.setTextColor(getResources().getColor(R.color.color_969696));
//        leftAxis.setGridColor(
//                getResources().getColor(R.color.color_transparent));

//        隐藏左边坐标轴横网格线
        leftAxis.setDrawGridLines(true);
        leftAxis.setGridColor(getResources().getColor(R.color.color_3f969696));
        //隐藏右边坐标轴横网格线
        mChart.getAxisRight().setDrawGridLines(false);
        //隐藏X轴竖网格线
        xl.setDrawGridLines(false);
        //隐藏左边Y轴
        leftAxis.setDrawAxisLine(false);
        leftAxis.setEnabled(true);

//        // 最大值
//        leftAxis.setAxisMaxValue(Integer.MAX_VALUE);
//        // 最小值
//        leftAxis.setAxisMinValue(0f);
        // 不一定要从0开始
//        leftAxis.setStartAtZero(false);
//        leftAxis.setDrawGridLines(true);

        YAxis rightAxis = mChart.getAxisRight();
        // 不显示图表的右边y坐标轴线
        rightAxis.setEnabled(false);


    }


    private void setLineData(ResponseCheck checkData) {
        FormData formData=checkData.formData;
        ArrayList<String> xVals = new ArrayList<String>();
        List<String> xLabel = formData.label;
        String[]dataKey=formData.dataKey;
        Map<String,List<Double>> datas=formData.data;//Y轴数据
        mChart.getAxisLeft().setLabelCount(formData.space,true);
//        List<Integer> checks = formData.check;
//        List<Integer> fakes = statistics.fakes;
//        List<Integer> mix = statistics.mix;
        for (int i = 0; i < xLabel.size(); i++) {
            xVals.add((xLabel.get(i)));
        }

         dataSets = new ArrayList<ILineDataSet>();


        for (int i = 0; i < dataKey.length; i++) {
            ArrayList<Entry> values = new ArrayList<Entry>();
            List<Double>yValues=datas.get(dataKey[i]);
            //稽查
            for (int j = 0; j < xLabel.size(); j++) {
//                Entry entry=new Entry((float) yValues.get(i), i);
                double value=yValues.get(j);
                //            entry.getXIndex()
                Entry entry=new Entry((float)value, j);
                values.add(entry);
            }
            LineDataSet d = new LineDataSet(values, dataKey[i]);
            d.setLineWidth(1f);
            d.setCircleRadius(4f);
            int color = mColors[i%mColors.length];
            d.setColor(color);
            d.setCircleColor(color);
            d.setValueTextColor(color);
            d.setValueTextSize(10);
            //是否显示点上的值
            d.setDrawValues(true);
            dataSets.add(d);

        }

//        //稽查
//        for (int i = 0; i < xLabel.size(); i++) {
//            Entry entry=new Entry((float) checks.get(i), i);
////            entry.getXIndex()
//            values.add(entry);
//        }
//        LineDataSet d = new LineDataSet(values, getResources().getString(R.string.tab_inspection));
//        d.setLineWidth(1f);
//        d.setCircleRadius(4f);
//        int color = mColors[0];
//        d.setColor(color);
//        d.setCircleColor(color);
//        d.setValueTextColor(color);
//        d.setValueTextSize(10);
//        //是否显示点上的值
//        d.setDrawValues(true);
//        dataSets.add(d);
//        //假烟
//        values = new ArrayList<Entry>();
//        for (int i = 0; i < xLabel.size(); i++) {
//            values.add(new Entry((float) fakes.get(i), i));
//        }
//
//        d = new LineDataSet(values, getResources().getString(R.string.false_smoke));
//        d.setLineWidth(1f);
//        d.setCircleRadius(4f);
//        color = mColors[1];
//        d.setColor(color);
//        d.setCircleColor(color);
//        d.setValueTextColor(color);
//        d.setValueTextSize(10);
//        d.setDrawValues(true);
//        dataSets.add(d);
//        //串货
//        values = new ArrayList<Entry>();
//        for (int i = 0; i < xLabel.size(); i++) {
//            values.add(new Entry((float) mix.get(i), i));
//        }
//
//        d = new LineDataSet(values, getResources().getString(R.string.chuan_huo));
//        d.setLineWidth(1f);
//        d.setCircleRadius(4f);
//        color = mColors[2];
//        d.setValueTextColor(color);
//        d.setValueTextSize(10);
//        d.setColor(color);
//        d.setCircleColor(color);
//        d.setDrawValues(true);
//        dataSets.add(d);

        // make the first DataSet dashed
//        ((LineDataSet) dataSets.get(0)).enableDashedLine(10, 10, 0);
//        ((LineDataSet) dataSets.get(0)).setColors(ColorTemplate.VORDIPLOM_COLORS);
//        ((LineDataSet) dataSets.get(0)).setCircleColors(ColorTemplate.VORDIPLOM_COLORS);

        LineData data = new LineData(xVals, dataSets);
        mChart.setData(data);
        mChart.animateX(500);
        mChart.invalidate();

        mChart.setOnChartValueSelectedListener(new OnChartValueSelectedListener() {
            @Override
            public void onValueSelected(Entry e, int dataSetIndex, Highlight h) {

                XAxis mXAxis=mChart.getXAxis();
                if (mXAxis.getSelectedIndex()!=e.getXIndex()) {
                    mXAxis.setSelectedIndex(e.getXIndex());
                    LineChartRenderer mRenderer =  mChart.getDataRenderer();
                    mRenderer.setSelectedIndex(mXAxis.getSelectedIndex());
                    mChart.invalidate();
                }
            }

            @Override
            public void onNothingSelected() {

            }
        });
    }


    @Override
    public void onClick(View v) {
        switch (v.getId()){
            case R.id.btn_detail:
                Intent intent=new Intent(getActivity(), InspectionDetailActivity.class);
                startActivity(intent);
                break;
        }
    }
}
