package com.ghg.tobacco.ui;

import android.content.Intent;
import android.view.View;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.TextView;

import com.ghg.tobacco.Data;
import com.ghg.tobacco.GetStaticData;
import com.ghg.tobacco.R;
import com.ghg.tobacco.base.BaseActivity;
import com.ghg.tobacco.bean.FormData;
import com.ghg.tobacco.bean.Store;
import com.ghg.tobacco.bean.response.ResponseStoreForm;
import com.ghg.tobacco.custom_view.wheel.ChangeBirthDialog;
import com.ghg.tobacco.utils.ResUtils;
import com.ghg.tobacco.utils.StringUtils;
import com.ghg.tobacco.utils.UnitUtils;
import com.github.mikephil.charting.charts.HorizontalBarChart;
import com.github.mikephil.charting.data.BarData;
import com.github.mikephil.charting.data.BarDataSet;
import com.github.mikephil.charting.data.BarEntry;
import com.github.mikephil.charting.interfaces.datasets.IBarDataSet;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

public class BusinessDetailActivity extends BaseActivity {

    private HorizontalBarChart mHorizontalBarChart;
    private int[] mBarColors;
    private TextView tv_year_sale_account;//年销售量
    private TextView tv_purchase_account;//进货量
    private TextView tv_inventory_account;//库存
    private TextView tv_date;//时间
    private ImageView btnDetail;
    private Store mStore;
    private RadioGroup mRadioGroup;
    private RadioButton rb_month;
    private ImageView btnLast, btnNext;
    private int currentYear, year;
    private Calendar calendar;
    private long yearMonthTime;


    @Override
    public int bindLayout() {
        return R.layout.activity_business_detail;
    }

    @Override
    public void initView() {
        setBtnBack();
        btnDetail = setBtnMenu();
        btnDetail.setImageResource(R.drawable.selector_btn_detail_circle);
        rb_month = findViewId(R.id.rb_month);
        mRadioGroup = findViewId(R.id.radioGroup);
        btnLast = findViewId(R.id.btn_last);
        btnNext = findViewId(R.id.btn_next);
        mHorizontalBarChart = findViewId(R.id.horizontalBarChart);
        tv_year_sale_account = findViewId(R.id.tv_year_sale_account);
        tv_purchase_account = findViewId(R.id.tv_purchase_account);
        tv_inventory_account = findViewId(R.id.tv_inventory_account);
        tv_date = findViewId(R.id.tv_date);
        mBarColors = new int[]{
                0xff92b2e5,
                0xff4377ca,
        };
        initHorizontalBarChart(mHorizontalBarChart, mBarColors);
    }

    @Override
    public void initListener() {
        tv_date.setOnClickListener(this);
        btnDetail.setOnClickListener(this);
        btnNext.setOnClickListener(this);
        btnLast.setOnClickListener(this);
        mRadioGroup.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(RadioGroup group, int checkedId) {

                switch (checkedId) {
                    case R.id.rb_month:
                        setDate(false);
                        setBarCharData(GetStaticData.TYPE_MONTH);
                        break;
                    case R.id.rb_year:
                        setDate(true);
                        setBarCharData(GetStaticData.TYPE_YEAR);
                        break;

                    default:
                        break;
                }
            }
        });
    }

    @Override
    public void initData() {

        Intent intent = getIntent();
        mStore = (Store) intent.getSerializableExtra("store");
        if (mStore != null) {
            setTitle(mStore.name);
        }
        calendar = Calendar.getInstance();
        yearMonthTime = calendar.getTimeInMillis();
        currentYear = calendar.get(Calendar.YEAR);
        year = currentYear;
        rb_month.setChecked(true);

    }

    private void setDate(boolean isYear) {
        if (!isYear) {
            String date = calendar.get(Calendar.YEAR) + "年" + (calendar.get(Calendar.MONTH) + 1) + "月";
            tv_date.setText(date);
        } else {
            tv_date.setText(StringUtils.format(ResUtils.getString(BusinessDetailActivity.this, R.string.date_year), currentYear));
        }
    }

    @Override
    public void resume() {

    }

    @Override
    public void pause() {

    }

    @Override
    public void stop() {

    }

    @Override
    public void destroy() {

    }

    @Override
    public void onClick(View v) {

        switch (v.getId()) {
            case R.id.btn_menu:
                Intent intent = new Intent(BusinessDetailActivity.this, StoreDetailActivity.class);
                intent.putExtra("store", mStore);
                startActivity(intent);
                break;

            case R.id.btn_last:
                if (rb_month.isChecked()) {
                    calendar.add(Calendar.MONTH, -1);
                    setDate(false);
                    setBarCharData(GetStaticData.TYPE_MONTH);


                } else {
                    if (currentYear > 0) {
                        currentYear--;
                        setDate(true);
                        setBarCharData(GetStaticData.TYPE_YEAR);
                    }
                }
                break;
            case R.id.btn_next:

                if (rb_month.isChecked()) {
                    if (calendar.getTimeInMillis() < yearMonthTime) {
                        calendar.add(Calendar.MONTH, 1);
                        setDate(false);
                        setBarCharData(GetStaticData.TYPE_MONTH);
                    }

                } else {
                    if (currentYear < year) {
                        currentYear++;
                        setDate(true);
                        setBarCharData(GetStaticData.TYPE_YEAR);

                    }
                }

                break;
            case R.id.tv_date:
                if (rb_month.isChecked()) {
                    showDatePicker(false);
                } else {
                    showDatePicker(true);
                }
                break;
        }
    }

    private List<IBarDataSet> getDataSet(FormData formData) {
        ArrayList<IBarDataSet> dataSets = new ArrayList<>();
        String dataKey[] = formData.dataKey;
        for (int i = 0; i < dataKey.length; i++) {
            ArrayList<BarEntry> valueSet = new ArrayList<>();
            List<Double> datas = formData.data.get(dataKey[i]);
            for (int j = 0; j < datas.size(); j++) {
                double value = datas.get(j);
                BarEntry barEntry = new BarEntry((float) value, j);
                valueSet.add(barEntry);
            }

            BarDataSet barDataSet = new BarDataSet(valueSet, dataKey[i]);
            barDataSet.setBarSpacePercent(20);
            barDataSet.setValueTextColor(ResUtils.getColor(this, R.color.color_969696));
            barDataSet.setValueTextSize(9);
            barDataSet.setColor(mBarColors[i % mBarColors.length]);
            dataSets.add(barDataSet);
        }
        return dataSets;
    }

    private void setHorizontalBarChartHeight(int labelSize) {

        LinearLayout.LayoutParams mParams = (LinearLayout.LayoutParams) mHorizontalBarChart.getLayoutParams();
        mParams.height = UnitUtils.dip2px(this, 40) * labelSize;
        mHorizontalBarChart.setLayoutParams(mParams);
    }

    private void setBarCharData(int type) {
        ResponseStoreForm responseStoreForm = Data.getResStoreForm(type, null);
        FormData formData = responseStoreForm.formData;
        setHorizontalBarChartHeight(formData.label.size());
        tv_inventory_account.setText(String.valueOf(responseStoreForm.inventory));
        tv_purchase_account.setText(String.valueOf(responseStoreForm.purchase));
        tv_year_sale_account.setText(String.valueOf(responseStoreForm.sale));
        List<IBarDataSet> dataSets = getDataSet(formData);
        BarData barData = new BarData(formData.label, dataSets);
        barData.setGroupSpace(200);
        barData.setHighlightEnabled(false);
        mHorizontalBarChart.setData(barData);
        mHorizontalBarChart.animateY(1000);
    }

    private void showDatePicker(final boolean isYear) {
        ChangeBirthDialog mChangeBirthDialog = new ChangeBirthDialog(
                BusinessDetailActivity.this, isYear);
        final Calendar c = Calendar.getInstance();
        int year = c.get(Calendar.YEAR);
        int month = c.get(Calendar.MONTH) + 1;
        mChangeBirthDialog.setDate(year, month, 1);
        mChangeBirthDialog.show();
        mChangeBirthDialog.setBirthdayListener(new ChangeBirthDialog.OnBirthListener() {

            @Override
            public void onClick(String year, String month, String day) {

                if (isYear){
                    BusinessDetailActivity.this.currentYear=Integer.parseInt(year);
                    setDate(true);
                    setBarCharData(GetStaticData.TYPE_YEAR);
                }else {
                    calendar.set(Integer.parseInt(year),Integer.parseInt(month)-1,1);
                    setDate(false);
                    setBarCharData(GetStaticData.TYPE_MONTH);
                }


            }
        });
    }


}
