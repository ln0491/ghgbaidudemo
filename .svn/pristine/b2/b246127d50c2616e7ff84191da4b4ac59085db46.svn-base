package com.ghg.tobacco.fragment;

import android.content.Intent;
import android.support.v4.app.Fragment;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewTreeObserver;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.TextView;

import com.ghg.tobacco.Data;
import com.ghg.tobacco.GetStaticData;
import com.ghg.tobacco.R;
import com.ghg.tobacco.base.BaseFragment;
import com.ghg.tobacco.bean.response.ResponseCheck;
import com.ghg.tobacco.ui.InspectionDetailActivity;
import com.ghg.tobacco.utils.UnitUtils;
import com.github.mikephil.charting.charts.LineChart;
import com.github.mikephil.charting.interfaces.datasets.ILineDataSet;

import java.util.ArrayList;


/**
 * A simple {@link Fragment} subclass.
 * Activities that contain this fragment must implement the
 * to handle interaction events.
 * create an instance of this fragment.
 */
public class InspectionFragment extends BaseFragment implements View.OnClickListener {
    private View mView;
    private RadioButton rb_month, rb_year;
    private LineChart mChart;
    private TextView tvMonth, tvDay;
    private TextView tv_inspection_nums, tv_false_smoke_nums, tv_Chuanhuo_nums;
    private RadioGroup mRadioGroup;
    private String[] months;
    private int[] mColors;
    private  ArrayList<ILineDataSet> dataSets;
    private Button btn_detail;
    private LinearLayout container_chart,container_tab;

    private int space=0;



    @Override
    public View bindLayout(LayoutInflater inflater) {
        return  mView = inflater.inflate(R.layout.fragment_inspection,null);
    }

    @Override
    public void initView() {
        mRadioGroup = (RadioGroup) mView.findViewById(R.id.radioGroup);
        btn_detail= (Button) mView.findViewById(R.id.btn_detail);
        mChart = (LineChart) mView.findViewById(R.id.lineChart);
        rb_month = (RadioButton) mView.findViewById(R.id.rb_month);
        rb_year = (RadioButton) mView.findViewById(R.id.rb_year);
        tv_inspection_nums = (TextView) mView.findViewById(R.id.tv_inspection_nums);
        tv_false_smoke_nums = (TextView) mView.findViewById(R.id.tv_false_smoke_nums);
        tv_Chuanhuo_nums = (TextView) mView.findViewById(R.id.tv_Chuanhuo_nums);
        tvMonth = (TextView) mView.findViewById(R.id.tv_month);
        tvDay = (TextView) mView.findViewById(R.id.tv_day);

        container_chart= (LinearLayout)  mView.findViewById(R.id.container_chart);
        container_tab= (LinearLayout) mView.findViewById(R.id.container_tab);


        initListener();
    }

    private void initData(ResponseCheck checkData) {
        String[] date = checkData.date.split("-");
        tvMonth.setText(String.valueOf(months[Integer.parseInt(date[0]) - 1]));
        tvDay.setText(String.valueOf(date[1]));
        tv_false_smoke_nums.setText(String.valueOf(checkData.fakes));
        tv_Chuanhuo_nums.setText(String.valueOf(checkData.mix));
        tv_inspection_nums.setText(String.valueOf(checkData.check));
    }

    @Override
    public void initData() {
        super.initData();
        months = new String[]{"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};
        mColors = new int[]{
                getResources().getColor(R.color.color_blue),
                getResources().getColor(R.color.color_f9435c),
                getResources().getColor(R.color.color_fdbc3b),
        };
        initialChart(mChart,mColors);
        rb_month.setChecked(true);

    }

    private void initListener() {
        container_tab.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {

            @Override
            public void onGlobalLayout() {
                if (isFrist){
                    if (space!=0){
                        setChartHeight(container_chart,container_tab.getHeight()+ UnitUtils.dip2px(getActivity(),9),space);
                    }
                    isFrist=false;
                }
            }
        });


        btn_detail.setOnClickListener(this);
        mRadioGroup.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(RadioGroup group, int checkedId) {
                ResponseCheck checkData = null;
                switch (checkedId) {
                    case R.id.rb_month:
//                        mHorizontalBarChart.getXAxis().setLabelRotationAngle(0);
                        checkData = Data.getResCheck(GetStaticData.TYPE_MONTH);
                        initData(checkData);
                        setLineData(mChart,checkData.formData,mColors,0);

                        break;
                    case R.id.rb_year:
//                        mHorizontalBarChart.getXAxis().setLabelRotationAngle(-30);
                        checkData = Data.getResCheck(GetStaticData.TYPE_YEAR);
//                        setLineData(checkData,0.2f);
                        setLineData(mChart,checkData.formData,mColors,0.2f);
                        break;
                }

                space = checkData.formData.space;
                int height = container_tab.getHeight();
                if (height != 0) {
                    setChartHeight(container_chart,height+ UnitUtils.dip2px(getActivity(),9),space);
                }
            }
        });
    }
    boolean isFrist=true;
//
//    // 初始化图表
//    private void initialChart(LineChart mChart) {
//        mColors = new int[]{
//                getResources().getColor(R.color.color_blue),
//                getResources().getColor(R.color.color_f9435c),
//                getResources().getColor(R.color.color_fdbc3b),
//        };
//
//
//        //描述
////        LinearLayout.LayoutParams params= (LinearLayout.LayoutParams) mChart.getLayoutParams();
////        params.height= UnitUtils.dip2px(getActivity(),5*50);
//        mChart.setDescription("");
//        mChart.setNoDataTextDescription("暂无数据");
//        mChart.setTouchEnabled(true);
//        // 不可拖曳
//        mChart.setDragEnabled(false);
//        // 不可缩放
//        mChart.setScaleEnabled(false);
//        mChart.setDrawGridBackground(false);
//        mChart.setPinchZoom(false);
//        // 设置图表的背景颜色
//        mChart.setBackgroundColor(getResources().getColor(R.color.color_transparent));
//
//        // 图表的注解(只有当数据集存在时候才生效)
//        Legend l = mChart.getLegend();
//        // 线性，也可是圆
//        l.setForm(Legend.LegendForm.CIRCLE);
//        // 可以修改图表注解部分的位置
//        l.setPosition(Legend.LegendPosition.ABOVE_CHART_RIGHT);
//        // 图表的注解的字体颜色
//        l.setTextColor(getResources().getColor(R.color.color_969696));
//        // x坐标轴
//        XAxis xl = mChart.getXAxis();
//        xl.setTextColor(getResources().getColor(R.color.color_969696));
//        xl.setAvoidFirstLastClipping(true);
//        xl.setSelectedIndex(0);
//        // 几个x坐标轴之间才绘制？
//        xl.setSpaceBetweenLabels(1);
//        xl.setDrawAxisLine(true);
//        xl.setAxisLineColor(getResources().getColor(R.color.color_3f969696));
//        xl.setTextColor(getResources().getColor(R.color.color_969696));
//        // 如果false，那么x坐标轴将不可见
//        xl.setEnabled(true);
//        // 将X坐标轴放置在底部，默认是在底部。
//        xl.setPosition(XAxis.XAxisPosition.BOTTOM);
//        LineChartRenderer chartRenderer = mChart.getDataRenderer();
//        chartRenderer.setXAxis(xl);
//
////        xl.setXOffset(30);
////        xl.setYOffset(30);
//        xl.setSelectedIndex(0);
//        xl.setFirstOffest(true);
//        chartRenderer.setSelectedIndex(0);
////        xl.setGridColor(
////                getResources().getColor(R.color.color_transparent));
//        // 图表左边的y坐标轴线
//        YAxis leftAxis = mChart.getAxisLeft();
////        leftAxis.setDrawZeroLine(true);
//        leftAxis.setTextColor(getResources().getColor(R.color.color_969696));
////        leftAxis.setGridColor(
////                getResources().getColor(R.color.color_transparent));
//        chartRenderer.setYAxis(leftAxis);
////        隐藏左边坐标轴横网格线
//        leftAxis.setDrawGridLines(true);
//        leftAxis.setGridColor(getResources().getColor(R.color.color_3f969696));
//        //隐藏右边坐标轴横网格线
//        mChart.getAxisRight().setDrawGridLines(false);
//        //隐藏X轴竖网格线
//        xl.setDrawGridLines(false);
//        //隐藏左边Y轴
//        leftAxis.setDrawAxisLine(false);
//        leftAxis.setEnabled(true);
//        leftAxis.setYOffset(-10);
////        leftAxis.setXOffset(5);
////        // 最大值
////        leftAxis.setAxisMaxValue(Integer.MAX_VALUE);
////        // 最小值
////        leftAxis.setAxisMinValue(0f);
//        // 不一定要从0开始
////        leftAxis.setStartAtZero(false);
////        leftAxis.setDrawGridLines(true);
//
//        YAxis rightAxis = mChart.getAxisRight();
//        // 不显示图表的右边y坐标轴线
//        rightAxis.setEnabled(false);
//
//
//    }


//    private void setLineData(ResponseCheck checkData,float lastAnchorX) {
//        mChart.getXAxis().lastAnchorX=lastAnchorX;
//        FormData formData=checkData.formData;
//        space=formData.space;
//        ArrayList<String> xVals = new ArrayList<String>();
//        List<String> xLabel = formData.label;
//        String[]dataKey=formData.dataKey;
//        Map<String,List<Double>> datas=formData.data;//Y轴数据
//        mChart.getAxisLeft().setLabelCount(formData.space+1,true);
//        int height=container_tab.getHeight();
//        if (height!=0){
//            setChartHeight(height);
//        }
//
////        List<Integer> checks = formData.check;
////        List<Integer> fakes = statistics.fakes;
////        List<Integer> mix = statistics.mix;
//        for (int i = 0; i < xLabel.size(); i++) {
//            xVals.add((xLabel.get(i)));
//        }
//
//         dataSets = new ArrayList<ILineDataSet>();
//
//        for (int i = 0; i < dataKey.length; i++) {
//            ArrayList<Entry> values = new ArrayList<Entry>();
//            List<Double>yValues=datas.get(dataKey[i]);
//            //稽查
//            for (int j = 0; j < xLabel.size(); j++) {
////                Entry entry=new Entry((float) yValues.get(i), i);
//                double value=yValues.get(j);
//                //            entry.getXIndex()
//                Entry entry=new Entry((float)value, j);
//                values.add(entry);
//            }
//            LineDataSet d = new LineDataSet(values, dataKey[i]);
//            d.setLineWidth(1f);
//            d.setCircleRadius(4f);
//            int color = mColors[i%mColors.length];
//            d.setColor(color);
//            d.setCircleColor(color);
//            d.setValueTextColor(color);
//            d.setValueTextSize(10);
//            //是否显示点上的值
//            d.setDrawValues(true);
//            dataSets.add(d);
//
//        }
//
//
//        LineData data = new LineData(xVals, dataSets);
//        mChart.setData(data);
//        mChart.animateX(500);
//        mChart.invalidate();
//        mChart.setOnChartValueSelectedListener(new OnChartValueSelectedListener() {
//            @Override
//            public void onValueSelected(Entry e, int dataSetIndex, Highlight h) {
//
//                XAxis mXAxis=mChart.getXAxis();
//                if (mXAxis.getSelectedIndex()!=e.getXIndex()) {
//                    mXAxis.setSelectedIndex(e.getXIndex());
//                    LineChartRenderer mRenderer =  mChart.getDataRenderer();
//                    mRenderer.setSelectedIndex(mXAxis.getSelectedIndex());
//                    mChart.invalidate();
//                }
//            }
//
//            @Override
//            public void onNothingSelected() {
//
//            }
//        });
//    }


    @Override
    public void onClick(View v) {
        switch (v.getId()){
            case R.id.btn_detail:
                Intent intent=new Intent(getActivity(), InspectionDetailActivity.class);
                startActivity(intent);
                break;
        }
    }

//    private void setChartHeight(int height){
//        LinearLayout.LayoutParams layoutParams= (LinearLayout.LayoutParams) container_chart.getLayoutParams();
//        layoutParams.height=UnitUtils.dip2px(getActivity(),space*50+40+40)+height;
//        container_chart.setLayoutParams(layoutParams);
//    }
}
