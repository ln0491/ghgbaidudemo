package com.ghg.tobacco.base;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.view.View;
import android.view.Window;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.ZoomControls;

import com.baidu.location.BDLocationListener;
import com.baidu.location.LocationClient;
import com.baidu.location.LocationClientOption;
import com.baidu.mapapi.clusterutil.clustering.ClusterItem;
import com.baidu.mapapi.clusterutil.clustering.ClusterManager;
import com.baidu.mapapi.map.BaiduMap;
import com.baidu.mapapi.map.BitmapDescriptor;
import com.baidu.mapapi.map.BitmapDescriptorFactory;
import com.baidu.mapapi.map.MapStatus;
import com.baidu.mapapi.map.MapStatusUpdateFactory;
import com.baidu.mapapi.map.MapView;
import com.baidu.mapapi.model.LatLng;
import com.ghg.tobacco.MyApplication;
import com.ghg.tobacco.R;
import com.ghg.tobacco.utils.StatusBarUtil;

import java.lang.ref.WeakReference;
import java.util.List;

/**
 * @author $Author
 * @version $Rev$
 * @time 2016/5/19 15:19
 * @des ${TODO}
 * @updateAuthor $Author$
 * @updateDate $Date$
 * @updateDes ${TODO}
 */
public abstract class BaseMapActivity extends AppCompatActivity implements IBaseActivity, View.OnClickListener {
    private WeakReference<Activity> task;
    private MyApplication application;
    public LocationClient mLocationClient;
    public MapView mMapView;
    public BaiduMap mBaiduMap;
    public ClusterManager<MyItem> mClusterManager;

    @Override
    public void setContentView(int layoutResID) {
        super.setContentView(layoutResID);
        setStatusBar();
    }

    /**
     * 设置状态栏颜色
     */
    protected void setStatusBar() {
        StatusBarUtil.setColor(this, getResources().getColor(R.color.colorPrimary), 0);
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        requestWindowFeature(Window.FEATURE_NO_TITLE);
        setContentView(bindLayout());
        initView();
        initListener();
        initData();
        application = (MyApplication) getApplication();
        task = new WeakReference<Activity>(this);
        application.pushTask(task);
    }

    @Override
    protected void onResume() {
        super.onResume();
        mMapView.onResume();
        resume();
    }

    @Override
    protected void onStop() {
        super.onStop();
        stop();
    }


    @Override
    protected void onPause() {
        super.onPause();
        mMapView.onPause();
        pause();
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        mMapView.onDestroy();
        application.removeTask(task);
        destroy();
    }


    @Override
    public void startActivity(Intent intent) {
        super.startActivity(intent);
        overridePendingTransition(R.anim.push_right_in, R.anim.push_right_out);
    }

    @Override
    public void startActivityForResult(Intent intent, int requestCode) {
        super.startActivityForResult(intent, requestCode);
        overridePendingTransition(R.anim.push_right_in, R.anim.push_right_out);
    }

    @Override
    public void finish() {
        super.finish();
        overridePendingTransition(R.anim.push_left_in, R.anim.push_left_out);
    }


    /**
     * 控件 findViewById
     *
     * @param id
     * @param <T>
     * @return
     */
    protected <T extends View> T findViewId(int id) {
        //return返回view时,加上泛型T
        return (T) findViewById(id);
    }

    /**
     * 返回按钮点击监听
     */
    public void setBtnBack() {
        ImageView btnBack = (ImageView) findViewById(R.id.btn_back);
        btnBack.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                finish();
            }
        });
    }

    /**
     * 设置Activity标题
     *
     * @param title 标题
     */
    public void setTitle(String title) {
        TextView tvTitle = (TextView) findViewById(R.id.tv_title);
        tvTitle.setText(title);
    }

    public ImageView setBtnMenu() {
        ImageView btnMenu = (ImageView) findViewById(R.id.btn_menu);
        btnMenu.setVisibility(View.VISIBLE);
        btnMenu.setOnClickListener(this);
        return btnMenu;
    }


    /**
     * 初始化定位
     */
    public void initLocation(BDLocationListener myListener) {
        mLocationClient = new LocationClient(getApplicationContext());     //声明LocationClient类
        mLocationClient.registerLocationListener(myListener);    //注册监听函数
        LocationClientOption option = new LocationClientOption();
        option.setLocationMode(LocationClientOption.LocationMode.Hight_Accuracy
        );//可选，默认高精度，设置定位模式，高精度，低功耗，仅设备
        option.setCoorType("bd09ll");//可选，默认gcj02，设置返回的定位结果坐标系
        //        int span=1000;
        //        option.setScanSpan(span);//可选，默认0，即仅定位一次，设置发起定位请求的间隔需要大于等于1000ms才是有效的
        option.setIsNeedAddress(true);//可选，设置是否需要地址信息，默认不需要
        option.setOpenGps(true);//可选，默认false,设置是否使用gps
        option.setLocationNotify(true);//可选，默认false，设置是否当gps有效时按照1S1次频率输出GPS结果
        option.setIsNeedLocationDescribe(true);//可选，默认false，设置是否需要位置语义化结果，可以在BDLocation.getLocationDescribe里得到，结果类似于“在北京天安门附近”
        option.setIsNeedLocationPoiList(true);//可选，默认false，设置是否需要POI结果，可以在BDLocation.getPoiList里得到
        option.setIgnoreKillProcess(false);//可选，默认true，定位SDK内部是一个SERVICE，并放到了独立进程，设置是否在stop的时候杀死这个进程，默认不杀死
        option.SetIgnoreCacheException(false);//可选，默认false，设置是否收集CRASH信息，默认收集
        option.setEnableSimulateGps(false);//可选，默认false，设置是否需要过滤gps仿真结果，默认需要
        mLocationClient.setLocOption(option);
    }


    /**
     * 设置地图中心
     *
     * @param latLng
     */
    public void setMapCenter(LatLng latLng) {
        if (latLng != null) {
            mBaiduMap.setMapStatus(MapStatusUpdateFactory.newMapStatus(new MapStatus.Builder().
                    target(latLng).build()));//设置缩放级别
        }
    }

    /**
     * 设置地图缩放级别
     *
     * @param zoom
     */
    public void setZoom(float zoom) {
        mBaiduMap.setMapStatus(MapStatusUpdateFactory.newMapStatus(new MapStatus.Builder().zoom(zoom).build()));//设置缩放级别

    }

    public void zoomOut() {
        mBaiduMap.setMapStatus(MapStatusUpdateFactory.zoomOut());
    }

    public void zoomIn() {
        mBaiduMap.setMapStatus(MapStatusUpdateFactory.zoomIn());
    }

    /**
     * 不显示地图缩放控件（按钮控制栏）
     */
    public void hideZoomControls() {

        mMapView.showZoomControls(false);
    }

    /**
     * 不显示地图上比例尺
     */
    public void hideScaleControl() {
        mMapView.showScaleControl(false);
    }

    /**
     * 隐藏地图logo
     */
    public void hideLogo() {
        View child = mMapView.getChildAt(1);
        if (child != null && (child instanceof ImageView || child instanceof ZoomControls)) {
            child.setVisibility(View.INVISIBLE);
        }
    }

    /**
     * 向地图添加Marker点
     */
    public void addMarkers(List<MyItem> items) {
        mClusterManager.clearItems();
        mClusterManager.addItems(items);

    }

    /**
     * 每个Marker点，包含Marker点坐标以及图标
     */
    public class MyItem implements ClusterItem {
        private final LatLng mPosition;
        private Bundle mBundle;
        private View mView;
        private int mDrawableId = 0;

        public MyItem(View view, LatLng latLng, Bundle bundle) {
            mPosition = latLng;
            mBundle = bundle;
            mView = view;
        }

        public MyItem(int drawableId, LatLng latLng, Bundle bundle) {
            mPosition = latLng;
            mBundle = bundle;
            mDrawableId = drawableId;
        }


        @Override
        public LatLng getPosition() {
            return mPosition;
        }

        public Bundle getBundle() {
            return mBundle;
        }


        @Override
        public BitmapDescriptor getBitmapDescriptor() {
            if (mView != null) {

                return BitmapDescriptorFactory
                        .fromView(mView);
            } else {
//                if (mDrawableId == 0) {
//                    return BitmapDescriptorFactory
//                            .fromResource(R.mipmap.store_location);
//                } else {
                    return BitmapDescriptorFactory
                            .fromResource(mDrawableId);

//                }
            }
        }
    }
}
