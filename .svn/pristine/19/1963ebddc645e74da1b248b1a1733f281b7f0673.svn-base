package com.ghg.tobacco.fragment;

import android.content.Intent;
import android.support.v4.app.Fragment;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewTreeObserver;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.TextView;

import com.ghg.tobacco.Data;
import com.ghg.tobacco.GetStaticData;
import com.ghg.tobacco.R;
import com.ghg.tobacco.base.BaseFragment;
import com.ghg.tobacco.bean.FormData;
import com.ghg.tobacco.bean.response.ResponseReport;
import com.ghg.tobacco.bean.response.ResponseReportTop5;
import com.ghg.tobacco.ui.ReportDetailActivity;
import com.ghg.tobacco.utils.DialogUtils;
import com.ghg.tobacco.utils.ResUtils;
import com.ghg.tobacco.utils.StringUtils;
import com.ghg.tobacco.utils.UnitUtils;
import com.ghg.tobacco.view.AreaDialog;
import com.github.mikephil.charting.charts.HorizontalBarChart;
import com.github.mikephil.charting.charts.LineChart;
import com.github.mikephil.charting.components.Legend;
import com.github.mikephil.charting.components.XAxis;
import com.github.mikephil.charting.components.YAxis;
import com.github.mikephil.charting.data.BarData;
import com.github.mikephil.charting.data.BarDataSet;
import com.github.mikephil.charting.data.BarEntry;
import com.github.mikephil.charting.interfaces.datasets.IBarDataSet;
import com.github.mikephil.charting.interfaces.datasets.ILineDataSet;

import java.util.ArrayList;
import java.util.List;


/**
 * A simple {@link Fragment} subclass.
 * Activities that contain this fragment must implement the
 * to handle interaction events.
 * create an instance of this fragment.
 */
public class ReportFragment extends BaseFragment implements View.OnClickListener{
    private View mView;
    private RadioButton rb_month, rb_year;
    private LineChart mChart;
    private TextView tvMonth,tvDay;
    private TextView tv_check_nums;
    private RadioGroup mRadioGroup;
    private String[]months;
    private int[] mColors ;
    private int[]mBarColors;
    private HorizontalBarChart mAreaHorizontalBarChart;
    private HorizontalBarChart mShopHorizontalBarChart;
    private Button btn_detail;
    private ArrayList<ILineDataSet> dataSets;
    private LinearLayout container_chart;
    private LinearLayout container_tab;

    private TextView mTvAreaChoose;
    private String[] address;
    private AreaDialog areaDialog;
    private ResponseReport checkData=null;
    @Override
    public View bindLayout(LayoutInflater inflater) {
        return mView=inflater.inflate(R.layout.fragment_report, null);
    }

    @Override
    public void initView() {
        btn_detail= (Button) mView.findViewById(R.id.btn_detail);
        mRadioGroup= (RadioGroup) mView.findViewById(R.id.radioGroup);
        mChart = (LineChart) mView.findViewById(R.id.lineChart);
        mAreaHorizontalBarChart = (HorizontalBarChart) mView.findViewById(R.id.horizontalBarChart);
        mShopHorizontalBarChart = (HorizontalBarChart) mView.findViewById(R.id.horizontalBarChartShop);
        rb_month = (RadioButton) mView.findViewById(R.id.rb_month);
        rb_year = (RadioButton) mView.findViewById(R.id.rb_year);
        tv_check_nums= (TextView) mView.findViewById(R.id.tv_check_nums);
        tvMonth= (TextView) mView.findViewById(R.id.tv_month);
        tvDay= (TextView) mView.findViewById(R.id.tv_day);

        container_chart= (LinearLayout) mView.findViewById(R.id.container_chart);
        container_tab= (LinearLayout) mView.findViewById(R.id.container_tab);

        mTvAreaChoose = (TextView) mView.findViewById(R.id.tv_area_choose);
        initListener();
        mColors = new int[]{
                getResources().getColor( R.color.color_blue),
                getResources().getColor(R.color.color_f9435c),
                getResources().getColor( R.color.color_fdbc3b),
        };
        months=new String[]{"Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"};
        //初始化折线图
        initialChart(mChart,mColors);
        //初始化被举报区域水平柱状图
        initHorizontalBarChart(mAreaHorizontalBarChart);
        //初始化被举报商店水平柱状图
        initHorizontalBarChart(mShopHorizontalBarChart);
        rb_month.setChecked(true);
    }


    private void initData(ResponseReport checkData) {

        Log.d("vivi","Date="+checkData.date);
        String[]date=checkData.date.split("-");
        tvMonth.setText(String.valueOf(months[Integer.parseInt(date[0])-1]));
        tvDay.setText(String.valueOf(date[1]));
        tv_check_nums.setText(String.valueOf(checkData.report));
        address = new String[]{"广东", "", ""};
        mTvAreaChoose.setText(address[0] + " " + address[1] + " " + address[2]);

    }

    @Override
    public void initData() {
        super.initData();
    }

    boolean isFrist=true;
    int space;
    private void initListener() {
        container_tab.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {

            @Override
            public void onGlobalLayout() {
                if (isFrist){
                    if (space!=0){
                        setChartHeight(container_tab.getHeight());
                    }
                    isFrist=false;
                }
            }
        });
        btn_detail.setOnClickListener(this);
        mRadioGroup.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(RadioGroup group, int checkedId) {

                switch (checkedId){
                    case R.id.rb_month:
                        checkData= Data.getResReport(GetStaticData.TYPE_MONTH);
                        initData(checkData);
                        setLineData(mChart,checkData.formData,mColors,0);
                        setBarData(GetStaticData.TYPE_MONTH);
                        break;
                    case R.id.rb_year:
                        checkData= Data.getResReport(GetStaticData.TYPE_YEAR);
                        initData(checkData);
                        setLineData(mChart,checkData.formData,mColors,0.2f);
                        setBarData(GetStaticData.TYPE_YEAR);
                        break;
                }

                if (checkData!=null){
                    space = checkData.formData.space;
                    int height = container_tab.getHeight();
                    if (height != 0) {
                        setChartHeight(height);
                    }
                }

            }
        });
        mTvAreaChoose.setOnClickListener(this);
    }




    /**
     * 初始化水平柱状图
     */
    private void initHorizontalBarChart(HorizontalBarChart mHorizontalBarChart){
        if (mBarColors==null){
            mBarColors = new int[]{
                    0xfffd7484,
                    0xffffbd3a,
                   0xff72a1e5,
                    0xff60ddf1,
                    0xffc675f5,
            };
        }


        mHorizontalBarChart.setDrawBarShadow(false);
        mHorizontalBarChart.setDrawValueAboveBar(true);
        mHorizontalBarChart.setDescription("");

        // if more than 60 entries are displayed in the chart, no values will be
        // drawn
        //        mHorizontalBarChart.setMaxVisibleValueCount(60);

        // scaling can now only be done on x- and y-axis separately
        mHorizontalBarChart.setPinchZoom(false);

        // draw shadows for each bar that show the maximum value
        // mHorizontalBarChart.setDrawBarShadow(true);

        // mHorizontalBarChart.setDrawXLabels(false);

        mHorizontalBarChart.setDrawGridBackground(false);

        // mHorizontalBarChart.setDrawYLabels(false);
        mHorizontalBarChart.setScaleEnabled(false);
        mHorizontalBarChart.setDragEnabled(false);

        XAxis xl = mHorizontalBarChart.getXAxis();
        xl.setPosition(XAxis.XAxisPosition.BOTTOM);
        xl.setDrawAxisLine(false);
        xl.setDrawGridLines(false);
        xl.setGridLineWidth(0.3f);
        xl.setTextColor(ResUtils.getColor(getActivity(),R.color.color_323232));
        xl.setTextSize(15);

        YAxis yl = mHorizontalBarChart.getAxisLeft();
        yl.setDrawAxisLine(false);
        yl.setDrawGridLines(false);
        yl.setGridLineWidth(0.3f);
        yl.setAxisMinValue(0f); // this replaces setStartAtZero(true)
        //        yl.setInverted(true);
        yl.setDrawLabels(false);

        YAxis yr = mHorizontalBarChart.getAxisRight();
        yr.setDrawAxisLine(false);
        yr.setDrawGridLines(false);
        yr.setDrawLabels(false);
        yr.setAxisMinValue(0f); // this replaces setStartAtZero(true)
        //        yr.setInverted(true);



        mHorizontalBarChart.setHighlightFullBarEnabled(false);
        Legend l = mHorizontalBarChart.getLegend();
        l.setEnabled(false);

    }





    private void setBarData(int type) {
        ResponseReportTop5 responseReportTop5=Data.getResReportTop5(type,0);
        FormData areaFormData=responseReportTop5.reportArea;
        FormData  shopFormData= responseReportTop5.reportShop;


        //被举报区域
        List<String> values= getXAxisValues(areaFormData.label);
        List<IBarDataSet> dataSets= getDataSet(areaFormData.data.get(areaFormData.dataKey[0]));
        BarData barData=new BarData(values,dataSets);
        barData.setHighlightEnabled(false);
        mAreaHorizontalBarChart.setData(barData);
        mAreaHorizontalBarChart.animateY(1000);
        //被举报商店
        List<String> valuesAShop= getXAxisValues(shopFormData.label);
        List<IBarDataSet> dataSetsShop= getDataSet(shopFormData.data.get(shopFormData.dataKey[0]));
        BarData barDataShop=new BarData(valuesAShop,dataSetsShop);
        barDataShop.setHighlightEnabled(false);
        mShopHorizontalBarChart.setData(barDataShop);
        mShopHorizontalBarChart.animateY(1000);





    }

    private List<IBarDataSet> getDataSet(List<Double> datas) {
        ArrayList<IBarDataSet> dataSets = null;
        ArrayList<BarEntry> valueSet = new ArrayList<>();
        for (int i=0;i<datas.size();i++){
            double value=datas.get(i);
            BarEntry barEntry = new BarEntry((float)value, i);
            valueSet.add(barEntry);
        }

        BarDataSet barDataSet= new BarDataSet(valueSet,"");
//        barDataSet.setBarBorderWidth(20);
//        barDataSet.setw
        barDataSet.setBarSpacePercent(60);
        barDataSet.setValueTextColor(ResUtils.getColor(getActivity(),R.color.color_969696));
        barDataSet.setValueTextSize(12);
        barDataSet.setColors(mBarColors);

        dataSets = new ArrayList<>();
        dataSets.add(barDataSet);
        return dataSets;
    }

    /**
     * 获取x轴数据
     * @param labels
     * @return
     */
    private List<String> getXAxisValues(List<String>labels) {
        ArrayList<String> xAxis = new ArrayList<>();
        for (int i=0;i<labels.size();i++){
            xAxis.add(labels.get(i));
        }

        return xAxis;
    }


    @Override
    public void onClick(View v) {
        switch (v.getId()){
            case R.id.btn_detail:
                Intent intent=new Intent(getActivity(), ReportDetailActivity.class);
                startActivity(intent);
                break;
            case R.id.tv_area_choose:

                areaDialog = DialogUtils.createAreaDialog(getActivity(), new View.OnClickListener() {

                    @Override
                    public void onClick(View v) {

                        address[0] = StringUtils.isNotEmpty(areaDialog.getProvince()) ? areaDialog.getProvince() : "";
                        address[1] = StringUtils.isNotEmpty(areaDialog.getCity()) ? areaDialog.getCity() : "";
                        address[2] = StringUtils.isNotEmpty(areaDialog.getArea()) ? areaDialog.getArea() : "";

                        mTvAreaChoose.setText(address[0] + " " + address[1] + " " + address[2]);
                        areaDialog.dismiss();

                        if (checkData!=null){
                            float anchorX=0.0f;
                            if (rb_year.isChecked()){
                                anchorX=0.2f;
                            }
                            setLineData(mChart,checkData.formData,mColors,anchorX);
                            space = checkData.formData.space;
                            int height = container_tab.getHeight();
                            if (height != 0) {
                                setChartHeight(container_chart, height + UnitUtils.dip2px(getActivity(), 9), space);
                            }
                        }
                    }
                }, address);

                break;
        }
    }

    private void setChartHeight(int height){
        LinearLayout.LayoutParams layoutParams= (LinearLayout.LayoutParams) container_chart.getLayoutParams();
        layoutParams.height= UnitUtils.dip2px(getActivity(),space*50+40+31)+height;
        container_chart.setLayoutParams(layoutParams);
    }
}
